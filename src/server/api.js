/**
 * https://github.com/meteor/meteor/blob/devel/packages/facebook/facebook_server.js#L88
 */

var crypto = require("crypto");
var nonceAlphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

function to_rfc3986 (string) {
  return encodeURIComponent(string).replace('!','%21').replace('*','%2A').replace('(','%28').replace(')','%29').replace("'",'%27');
};

function mapObject (object, factory) {
  var array = [];
  for (var name in object) {
    array.push(factory(object[name], name));
  }
  return array;
};

function getNonce () {
  var text = [];
  for(var i = 0; i < 32; i++) {
    text.push(nonceAlphabet.charAt(Math.floor(Math.random() * nonceAlphabet.length)));
  }
  return text.join('');
};

function getAuthHeader (authProps) {
  var oauth = mapObject(authProps, commaSpaceEncoding).sort();
  oauth.push(oauth.pop().replace(', ', ''));
  oauth.unshift('OAuth ');
  return oauth.join('');
};

function getAuthProperties (user, request) {
  var props = {};
  props.oauth_consumer_key = user.consumer_key;
  props.oauth_nonce = getNonce();
  props.oauth_signature_method = 'HMAC-SHA1';
  props.oauth_timestamp = Math.floor(new Date() / 1000).toString();
  props.oauth_token = user.access_token;
  props.oauth_version = '1.0';
  props.oauth_signature = getAuthSignature(user.consumer_secret, user.token_secret, request, props);
  return props;
};

function ampersandEncoding (val, key) {
  return ENCODING_METHOD(key) + '=' + ENCODING_METHOD(val) + '&';
};

// Used with mapObject() to create percent-encoded strings like this: key1="val1", key2="val2", key3="val3"
function commaSpaceEncoding (val, key) {
  return ENCODING_METHOD(key) + '="' + ENCODING_METHOD(val) + '", ';
};

function getAuthSignature (consumer_secret, token_secret, request, oauth) {
  var signingKey, body, signatureBase;

  signingKey =
    to_rfc3986(consumer_secret) + '&' + to_rfc3986(token_secret);

  body =
    mapObject(oauth, ampersandEncoding)
    .concat(mapObject(request.params, ampersandEncoding))
    .sort();

  body.push(body.pop().replace('&', ''));

  signatureBase =
    request.method.toUpperCase() + '&' +
    to_rfc3986(request.url) + '&' +
    to_rfc3986(body.join(''));

  return crypto.createHmac('sha1', signingKey)
               .update(signatureBase)
               .digest('base64');
};

function twitterRequest(opts) {
  var request = {};
  if (!opts.url) return console.error('request(opts): opts.url missing');
  request.url = 'https://api.twitter.com/1.1/' + opts.url + '.json';
  request.method = opts.method || 'GET';
  request.params = opts.params || {};
  if (!opts.user) return console.error('request(opts): opts.user missing');
  var authProps = getAuthProperties(opts.user, request);
  request.headers = {
    'Authorization': getAuthHeader(authProps)
  };
  return request;
};

// example return:
// {
// contributors_enabled: false
// created_at: "Wed Apr 13 08:56:17 +0000 2016"
// default_profile: true
// default_profile_image: false
// description: ""
// entities: Object
// favourites_count: 0
// follow_request_sent: false
// followers_count: 3
// following: false
// friends_count: 17
// geo_enabled: false
// has_extended_profile: false
// id: 720173751346847700
// id_str: "720173751346847744"
// is_translation_enabled: false
// is_translator: false
// lang: "en"
// listed_count: 0
// location: ""
// name: "Dmitry Sher"
// needs_phone_verification: false
// notifications: false
// profile_background_color: "F5F8FA"
// profile_background_image_url: null
// profile_background_image_url_https: null
// profile_background_tile: false
// profile_image_url: "http://pbs.twimg.com/profile_images/720174479280906240/SxmRrjtO_normal.jpg"
// profile_image_url_https: "https://pbs.twimg.com/profile_images/720174479280906240/SxmRrjtO_normal.jpg"
// profile_link_color: "2B7BB9"
// profile_location: null
// profile_sidebar_border_color: "C0DEED"
// profile_sidebar_fill_color: "DDEEF6"
// profile_text_color: "333333"
// profile_use_background_image: true
// protected: false
// screen_name: "dmitry_sher"
// status: Object
// statuses_count: 1
// suspended: false
// time_zone: null
// translator_type: "none"
// url: null
// utc_offset: null
// verified: false
// }

var getIdentity = function (accessToken, tokenSecret) {
  // https://dev.twitter.com/oauth/overview/authorizing-requests
  // OAuth
  //      oauth_consumer_key="xvz1evFS4wEEPTGEFPHBog", <-- get it from settings
  //      oauth_nonce="kYjzVBB8Y0ZFabxSWbWovY3uYSQ2pTgmZeNu2VS4cg", <-- random string
  //
  //      The oauth_signature parameter contains a value which is generated by running all of the other request parameters and two secret values through a signing algorithm.
  //      https://dev.twitter.com/oauth/overview/creating-signatures
  //      oauth_signature="tnnArxj06cWHq44gCs1OSKk%2FjLY%3D",
  //      oauth_signature_method="HMAC-SHA1",
  //      oauth_timestamp="1318622958", <-- The oauth_timestamp parameter indicates when the request was created.
  //      oauth_token="370773112-GmHxMAgYyLbNEtIKZeRNFsMKPR9EyMZeS9weJAEb", <-- accessToken
  //      oauth_version="1.0"
  	try {
      var opts = {
        url: 'account/verify_credentials',
        user: {
          consumer_key: Meteor.settings.twitter.consumerKey,
          consumer_secret: Meteor.settings.twitter.consumerSecret,
          access_token: accessToken,
          token_secret: tokenSecret
        }
      };
    	return HTTP.get("https://api.twitter.com/1.1/account/verify_credentials.json", {
      		params: {access_token: accessToken}}).data;
  	} catch (err) {
    	throw _.extend(new Error("Failed to fetch identity from Twitter. " + err.message),
                   {response: err.response});
  	}
};

// var getProfilePicture = function (accessToken) {
//     try {
//         return HTTP.get("https://graph.facebook.com/v2.0/me/picture/?redirect=false", {
//         params: {access_token: accessToken}}).data.data.url;
//     } catch (err) {
//         throw _.extend(new Error("Failed to fetch identity from Facebook. " + err.message),
//                    {response: err.response});
//     }
// };

CTW.getIdentity = getIdentity;
// CTW.getProfilePicture = getProfilePicture;